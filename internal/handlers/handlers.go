package handlers

import (
	"awesomeProject/internal/models"
	"awesomeProject/internal/service"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
	"time"
)

type BotHandler struct {
	bot        *tgbotapi.BotAPI
	service    *service.Service
	userStates map[int64]*UserState
}

type UserState struct {
	Step        string
	GoalData    *models.Goal
	Title       string
	Description string
	Deadline    time.Time
	Bet         int
}

func NewBotHandler(bot *tgbotapi.BotAPI, service *service.Service) *BotHandler {
	return &BotHandler{
		bot:        bot,
		service:    service,
		userStates: make(map[int64]*UserState),
	}
}

func (h *BotHandler) HandleUpdate(update tgbotapi.Update) {
	// Handle messages
	if update.Message != nil {
		h.handleMessage(update.Message)
	}

	// Handle callback queries (buttons)
	if update.CallbackQuery != nil {
		h.handleCallbackQuery(update.CallbackQuery)
	}
}

func (h *BotHandler) handleMessage(message *tgbotapi.Message) {
	// Register user
	username := message.From.UserName
	if username == "" {
		username = message.From.FirstName
	}

	user, err := h.service.RegisterUser(message.From.ID, username, message.Chat.ID)
	if err != nil {
		log.Printf("Error registering user: %v", err)
	}

	// Handle commands
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			h.handleStart(message)
		case "help":
			h.handleHelp(message)
		case "newgoal":
			h.handleNewGoal(message, user)
		case "mygoals":
			h.handleMyGoals(message, user)
		case "goals":
			h.handleChatGoals(message)
		case "stats":
			h.handleStats(message, user)
		case "cancel":
			h.handleCancel(message)
		}
		return
	}

	// Handle state-based input
	if state, exists := h.userStates[message.From.ID]; exists {
		h.handleStateInput(message, state, user)
	}
}

func (h *BotHandler) handleStart(message *tgbotapi.Message) {
	text := `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é.

üéØ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –°–æ–∑–¥–∞–π —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é /newgoal
2. –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ä–æ–∫ –∏ —Å—Ç–∞–≤–∫—É –≤ –∑–≤–µ–∑–¥–∞—Ö
3. –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
4. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ—Å–µ–¥—ã –ø—Ä–æ–≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
5. –ï—Å–ª–∏ —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - —Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å –∑–≤–µ–∑–¥—ã
6. –ï—Å–ª–∏ –Ω–µ—Ç - –∑–≤–µ–∑–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—Å—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏

üìã –ö–æ–º–∞–Ω–¥—ã:
/newgoal - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å
/mygoals - –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
/goals - –í—Å–µ —Ü–µ–ª–∏ –≤ –±–µ—Å–µ–¥–µ
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	h.bot.Send(msg)
}

func (h *BotHandler) handleHelp(message *tgbotapi.Message) {
	text := `üìñ –ü–æ–º–æ—â—å

üìã –ö–æ–º–∞–Ω–¥—ã:
/newgoal - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å
/mygoals - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
/goals - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ü–µ–ª–∏ –≤ –±–µ—Å–µ–¥–µ
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –°—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –ì–æ–ª–æ—Å—É–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∑–∞ —Ü–µ–ª–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 100 –∑–≤–µ–∑–¥`

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	h.bot.Send(msg)
}

func (h *BotHandler) handleNewGoal(message *tgbotapi.Message, _ *models.User) {
	h.userStates[message.From.ID] = &UserState{
		Step: "awaiting_title",
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:")
	_, _ = h.bot.Send(msg)
}

func (h *BotHandler) handleStateInput(message *tgbotapi.Message, state *UserState, user *models.User) {
	switch state.Step {
	case "awaiting_title":
		state.Title = message.Text
		state.Step = "awaiting_description"
		msg := tgbotapi.NewMessage(message.Chat.ID, "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏:")
		_, _ = h.bot.Send(msg)

	case "awaiting_description":
		state.Description = message.Text
		state.Step = "awaiting_deadline"
		msg := tgbotapi.NewMessage(message.Chat.ID, "üìÖ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: 2024-12-31 –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7):")
		_, _ = h.bot.Send(msg)

	case "awaiting_deadline":
		deadline, err := h.parseDeadline(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7)")
			_, _ = h.bot.Send(msg)
			return
		}
		state.Deadline = deadline
		state.Step = "awaiting_bet"

		// Get fresh user data to show current balance
		freshUser, err := h.service.GetOrCreateUser(message.From.ID, message.From.UserName)
		if err != nil {
			log.Printf("Error getting user: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚≠ê –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –∑–≤–µ–∑–¥–∞—Ö:"))
			_, _ = h.bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚≠ê –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –∑–≤–µ–∑–¥–∞—Ö (–≤–∞—à –±–∞–ª–∞–Ω—Å: %d):", freshUser.Balance))
			_, _ = h.bot.Send(msg)
		}

	case "awaiting_bet":
		bet, err := strconv.Atoi(message.Text)
		if err != nil || bet <= 0 {
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
			_, _ = h.bot.Send(msg)
			return
		}

		// Get fresh user data to check current balance
		freshUser, err := h.service.GetOrCreateUser(message.From.ID, message.From.UserName)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
			_, _ = h.bot.Send(msg)
			delete(h.userStates, message.From.ID)
			return
		}

		if bet > freshUser.Balance {
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –£ –≤–∞—Å: %d", freshUser.Balance))
			_, _ = h.bot.Send(msg)
			return
		}

		state.Bet = bet

		// Create goal - use freshUser.ID
		goal, err := h.service.CreateGoal(freshUser.ID, message.Chat.ID, state.Title, state.Description, state.Deadline, state.Bet)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏: %v", err))
			_, _ = h.bot.Send(msg)
			delete(h.userStates, message.From.ID)
			return
		}

		text := fmt.Sprintf(`‚úÖ –¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!

üéØ %s
üìÑ %s
üìÖ –°—Ä–æ–∫: %s
‚≠ê –°—Ç–∞–≤–∫–∞: %d –∑–≤–µ–∑–¥

–£–¥–∞—á–∏! –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mygoals —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ.`,
			goal.Title,
			goal.Description,
			goal.Deadline.Format("02.01.2006"),
			goal.Bet,
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		_, _ = h.bot.Send(msg)

		delete(h.userStates, message.From.ID)

	case "awaiting_proof":
		// Handle proof submission
		if state.GoalData != nil {
			err := h.service.SubmitProof(state.GoalData.ID, message.Text)
			if err != nil {
				msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err))
				_, _ = h.bot.Send(msg)
				return
			}

			// Get fresh user data for username
			freshUser, err := h.service.GetOrCreateUser(message.From.ID, message.From.UserName)
			if err != nil {
				freshUser = user // fallback to cached user
			}

			// Send notification to chat with voting buttons
			text := fmt.Sprintf(`üì¢ @%s –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏:

üéØ %s
üìÑ %s
üí¨ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: %s

–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:`,
				freshUser.Username,
				state.GoalData.Title,
				state.GoalData.Description,
				message.Text,
			)

			// Create inline keyboard with voting buttons
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", fmt.Sprintf("vote_yes_%d", state.GoalData.ID)),
					tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", fmt.Sprintf("vote_no_%d", state.GoalData.ID)),
				),
			)

			msg := tgbotapi.NewMessage(message.Chat.ID, text)
			msg.ReplyMarkup = keyboard
			_, _ = h.bot.Send(msg)

			delete(h.userStates, message.From.ID)
		}
	}
}

func (h *BotHandler) handleMyGoals(message *tgbotapi.Message, user *models.User) {
	goals, err := h.service.GetUserActiveGoals(user.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err))
		_, _ = h.bot.Send(msg)
		return
	}

	if len(goals) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /newgoal")
		_, _ = h.bot.Send(msg)
		return
	}

	text := "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:\n\n"

	var buttons [][]tgbotapi.InlineKeyboardButton
	for i, goal := range goals {
		statusEmoji := "üîÑ"
		if goal.Status == "done_pending" {
			statusEmoji = "‚è≥"
		}

		text += fmt.Sprintf("%d. %s %s\n   üìÖ %s | ‚≠ê %d\n\n",
			i+1,
			statusEmoji,
			goal.Title,
			goal.Deadline.Format("02.01.2006"),
			goal.Bet,
		)

		if goal.Status == "active" {
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ #%d", i+1),
					fmt.Sprintf("proof_%d", goal.ID),
				),
			))
		}
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	if len(buttons) > 0 {
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
	}
	_, _ = h.bot.Send(msg)
}

func (h *BotHandler) handleChatGoals(message *tgbotapi.Message) {
	goals, err := h.service.GetActiveGoalsByChat(message.Chat.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err))
		_, _ = h.bot.Send(msg)
		return
	}

	if len(goals) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.")
		_, _ = h.bot.Send(msg)
		return
	}

	text := "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ –≤ –±–µ—Å–µ–¥–µ:\n\n"
	for i, goal := range goals {
		// Get user info
		user, _ := h.service.GetUserByID(int64(goal.UserID))

		statusEmoji := "üîÑ"
		statusText := "–ê–∫—Ç–∏–≤–Ω–∞"
		if goal.Status == "done_pending" {
			statusEmoji = "‚è≥"
			statusText = "–ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"
		}

		text += fmt.Sprintf("%d. %s %s\n   üë§ @%s\n   üìÖ %s | ‚≠ê %d | %s\n\n",
			i+1,
			statusEmoji,
			goal.Title,
			user.Username,
			goal.Deadline.Format("02.01.2006"),
			goal.Bet,
			statusText,
		)
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	_, _ = h.bot.Send(msg)
}

func (h *BotHandler) handleStats(message *tgbotapi.Message, user *models.User) {
	stats, err := h.service.GetUserStats(user.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err))
		h.bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, stats)
	h.bot.Send(msg)
}

func (h *BotHandler) handleCancel(message *tgbotapi.Message) {
	delete(h.userStates, message.From.ID)
	msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
	h.bot.Send(msg)
}

func (h *BotHandler) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	parts := strings.Split(query.Data, "_")

	if len(parts) < 2 {
		return
	}

	action := parts[0]

	// Get user
	username := query.From.UserName
	if username == "" {
		username = query.From.FirstName
	}
	user, err := h.service.RegisterUser(query.From.ID, username, query.Message.Chat.ID)
	if err != nil {
		log.Printf("Error registering user: %v", err)
		return
	}

	switch action {
	case "proof":
		// User wants to submit proof
		goalID, _ := strconv.Atoi(parts[1])
		goal, err := h.service.GetGoal(goalID)
		if err != nil {
			h.answerCallback(query, "‚ùå –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
			return
		}

		h.userStates[query.From.ID] = &UserState{
			Step:     "awaiting_proof",
			GoalData: goal,
		}

		msg := tgbotapi.NewMessage(query.Message.Chat.ID, "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Å—Å—ã–ª–∫–∞):")
		_, _ = h.bot.Send(msg)
		h.answerCallback(query, "")

	case "vote":
		// User is voting
		if len(parts) < 3 {
			return
		}

		voteType := parts[1] // "yes" or "no"
		goalID, _ := strconv.Atoi(parts[2])

		vote := voteType == "yes"
		err := h.service.VoteOnGoal(goalID, user.ID, vote)
		if err != nil {
			h.answerCallback(query, fmt.Sprintf("‚ùå %v", err))
			return
		}

		// Check if voting is complete and finalize
		result, err := h.service.FinalizeGoal(goalID, query.Message.Chat.ID)
		if err != nil {
			h.answerCallback(query, "‚úÖ –ì–æ–ª–æ—Å —É—á—Ç–µ–Ω")
			return
		}

		// Send result to chat
		msg := tgbotapi.NewMessage(query.Message.Chat.ID, result)
		_, _ = h.bot.Send(msg)

		h.answerCallback(query, "‚úÖ –ì–æ–ª–æ—Å —É—á—Ç–µ–Ω")
	}
}

func (h *BotHandler) answerCallback(query *tgbotapi.CallbackQuery, text string) {
	callback := tgbotapi.NewCallback(query.ID, text)
	h.bot.Request(callback)
}

func (h *BotHandler) parseDeadline(input string) (time.Time, error) {
	// Try parsing as date
	t, err := time.Parse("2006-01-02", input)
	if err == nil {
		return t, nil
	}

	// Try parsing as number of days
	days, err := strconv.Atoi(input)
	if err == nil && days > 0 {
		return time.Now().AddDate(0, 0, days), nil
	}

	return time.Time{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
}
